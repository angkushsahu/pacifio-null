{"version":3,"file":"static/js/390.a15b0537.chunk.js","mappings":"gSAiHA,UArGc,WACV,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAA+CC,EAAAA,EAAAA,MAAkB,eAA1DC,EAAK,YAAIC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAASC,EAAK,EAALA,MACpC,GAAwCC,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KACpC,GAAsCF,EAAAA,EAAAA,UAAS,CAAEG,MAAO,GAAIC,SAAU,KAAK,eAApEC,EAAW,KAAEC,EAAc,KAC5BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAO,yCAAG,WAAOC,GAAY,gFAER,GADvBA,EAAEC,iBACMR,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SAEVD,GAAUC,EAAQ,gBAC0B,OAA7CQ,EAAAA,GAAAA,KAAW,kCAAkC,8BAG5CC,EAAAA,EAAAA,GAAcV,GAAO,CAAD,eACsB,OAA3CS,EAAAA,GAAAA,KAAW,gCAAgC,oDAKtBhB,EAAMS,GAAaS,SAAS,KAAD,IAA1CC,EAAM,QACDC,UACPJ,EAAAA,GAAAA,QAAcG,EAAOE,SACrBxB,GAASyB,EAAAA,EAAAA,IAAQ,CAAEC,KAAMJ,EAAOI,QAChCZ,EAAS,IAAK,CAAEa,SAAS,KAC5B,kDAEDR,EAAAA,GAAAA,MAAY,KAAIS,KAAKJ,SAAW,mBAAmB,0DAE1D,gBAvBY,uCAyBbK,EAAAA,EAAAA,YAAU,WACFxB,IACAc,EAAAA,GAAAA,MAAab,EAAcsB,KAAKJ,SAChCxB,GAAS8B,EAAAA,EAAAA,OAEjB,GAAG,CAACzB,EAASC,EAAON,IAEpB,IAAM+B,EAAgB,SAACd,GACnB,MAAwBA,EAAEe,OAAlBC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdrB,GAAe,kBAAKD,GAAW,cAAGqB,EAAOC,IAC7C,EAKA,OACI,8BACK9B,GACG,SAAC,IAAW,KAEZ,kBAAM+B,UAAU,iBAAgB,WAC5B,gBAAKA,UAAU,kBAAiB,UAC5B,gBAAKC,IAAKC,EAAAA,EAAiBC,IAAI,aAAaC,QAAQ,YAExD,kBAAMC,SAAUxB,EAAQ,WACpB,wBAAI,WACJ,iBAAKmB,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,QAAO,SAAC,uBACvB,kBACIC,KAAK,QACLT,KAAK,QACLU,GAAG,QACHC,YAAY,yBACZV,MAAOtB,EAAYF,MACnBmC,SAAUd,QAGlB,iBAAKI,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,WAAU,SAAC,yBAC1B,kBACIC,KAAMlC,EAAe,OAAS,WAC9ByB,KAAK,WACLU,GAAG,WACHC,YAAY,0BACZV,MAAOtB,EAAYD,SACnBkC,SAAUd,IAEbvB,GAAe,SAAC,MAAM,CAACsC,QAlCd,WAAH,OAASrC,GAAgB,EAAO,KAkC0B,SAAC,MAAM,CAACqC,QAnC/D,WAAH,OAASrC,GAAgB,EAAM,QAqC1C,gBAAK0B,UAAU,sBAAqB,UAChC,SAAC,KAAI,CAACY,GAAIC,EAAAA,EAAAA,eAAuBb,UAAU,aAAY,SAAC,yBAI5D,mBAAQO,KAAK,SAASO,SAAU7C,EAAU,SAAC,WAG3C,gBAAK+B,UAAU,sBAAqB,UAChC,SAAC,KAAI,CAACY,GAAIC,EAAAA,EAAAA,OAAeb,UAAU,aAAY,SAAC,4BAS5E,C,qBCzGA,IANsB,SAACzB,GACnB,OAAOA,EAAMwC,MACT,wJAER,C","sources":["components/features/auth/login/index.tsx","utils/validateEmail.ts"],"sourcesContent":["import { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BiShow, BiHide } from \"react-icons/bi\";\r\nimport LoadingPage from \"components/common/loading\";\r\nimport { validateEmail } from \"utils\";\r\nimport routes from \"components/app/routes\";\r\nimport { useAppDispatch } from \"store\";\r\nimport { removeUser, setUser } from \"store/slices\";\r\nimport backgroundImage from \"assets/formBackground.svg\";\r\nimport { useLoginMutation } from \"store/queries\";\r\n\r\nconst Login = () => {\r\n    const dispatch = useAppDispatch();\r\n    const [login, { isLoading, isError, error }] = useLoginMutation();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [inputValues, setInputValues] = useState({ email: \"\", password: \"\" });\r\n    const navigate = useNavigate();\r\n\r\n    const onLogin = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const { email, password } = inputValues;\r\n\r\n        if (!email || !password) {\r\n            toast.warn(\"Please validate all the fields\");\r\n            return;\r\n        }\r\n        if (!validateEmail(email)) {\r\n            toast.warn(\"E-mail format is not correct\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const result = await login(inputValues).unwrap();\r\n            if (result.success) {\r\n                toast.success(result.message);\r\n                dispatch(setUser({ user: result.user }));\r\n                navigate(\"/\", { replace: true });\r\n            }\r\n        } catch (err: any) {\r\n            toast.error(err.data.message || \"Unable to login\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isError) {\r\n            toast.error((error as any).data.message);\r\n            dispatch(removeUser());\r\n        }\r\n    }, [isError, error, dispatch]);\r\n\r\n    const validateInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setInputValues({ ...inputValues, [name]: value });\r\n    };\r\n\r\n    const showPasswordFunctionality = () => setShowPassword(true);\r\n    const hidePasswordFunctionality = () => setShowPassword(false);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingPage />\r\n            ) : (\r\n                <main className=\"form-container\">\r\n                    <div className=\"image-container\">\r\n                        <img src={backgroundImage} alt=\"background\" loading=\"lazy\" />\r\n                    </div>\r\n                    <form onSubmit={onLogin}>\r\n                        <h1>Login</h1>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"email\">Enter your e-mail</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"e.g. johndoe@gmail.com\"\r\n                                value={inputValues.email}\r\n                                onChange={validateInput}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"password\">Enter your password</label>\r\n                            <input\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                name=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"Enter a strong password\"\r\n                                value={inputValues.password}\r\n                                onChange={validateInput}\r\n                            />\r\n                            {showPassword ? <BiHide onClick={hidePasswordFunctionality} /> : <BiShow onClick={showPasswordFunctionality} />}\r\n                        </div>\r\n                        <div className=\"more-links--wrapper\">\r\n                            <Link to={routes.forgotPassword} className=\"more-links\">\r\n                                Forgot Password ?\r\n                            </Link>\r\n                        </div>\r\n                        <button type=\"submit\" disabled={isLoading}>\r\n                            Login\r\n                        </button>\r\n                        <div className=\"more-links--wrapper\">\r\n                            <Link to={routes.signup} className=\"more-links\">\r\n                                Signup instead\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","const validateEmail = (email: string) => {\r\n    return email.match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport default validateEmail;\r\n"],"names":["dispatch","useAppDispatch","useLoginMutation","login","isLoading","isError","error","useState","showPassword","setShowPassword","email","password","inputValues","setInputValues","navigate","useNavigate","onLogin","e","preventDefault","toast","validateEmail","unwrap","result","success","message","setUser","user","replace","data","useEffect","removeUser","validateInput","target","name","value","className","src","backgroundImage","alt","loading","onSubmit","htmlFor","type","id","placeholder","onChange","onClick","to","routes","disabled","match"],"sourceRoot":""}