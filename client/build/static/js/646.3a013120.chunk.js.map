{"version":3,"file":"static/js/646.3a013120.chunk.js","mappings":"0SA+KA,UAlKe,WACX,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAgDC,EAAAA,EAAAA,MAAmB,eAA5DC,EAAM,YAAIC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAASC,EAAK,EAALA,MACrC,GAAwCC,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KACpC,GAAsDF,EAAAA,EAAAA,WAAS,GAAM,eAA9DG,EAAmB,KAAEC,EAAsB,KAClD,GAAsCJ,EAAAA,EAAAA,UAAS,CAC3CK,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,gBAAiB,GACjBC,OAAQ,KACV,eANKC,EAAW,KAAEC,EAAc,KAO5BC,GAAYC,EAAAA,EAAAA,QAAgC,MAC5CC,GAAWC,EAAAA,EAAAA,MAEXC,EAAQ,yCAAG,WAAOC,GAAY,oFAEc,GAD9CA,EAAEC,iBACMb,EAA2CK,EAA3CL,KAAMC,EAAqCI,EAArCJ,MAAOC,EAA8BG,EAA9BH,SAAUC,EAAoBE,EAApBF,gBAE1BH,GAASC,GAAUC,GAAaC,EAAe,gBACH,OAA7CW,EAAAA,GAAAA,KAAW,kCAAkC,8BAG5CC,EAAAA,EAAAA,GAAcd,GAAO,CAAD,eACsB,OAA3Ca,EAAAA,GAAAA,KAAW,gCAAgC,6BAG3CZ,IAAaC,EAAe,iBACoB,OAAhDW,EAAAA,GAAAA,MAAY,oCAAoC,sDAK3BvB,EAAOc,GAAaW,SAAS,KAAD,IAA3CC,EAAM,QACDC,UACPJ,EAAAA,GAAAA,QAAcG,EAAOE,SACrB/B,GAASgC,EAAAA,EAAAA,IAAQ,CAAEC,KAAMJ,EAAOI,QAChCZ,EAAS,IAAK,CAAEa,SAAS,KAC5B,mDAEDR,EAAAA,GAAAA,MAAY,KAAIS,KAAKJ,SAAW,oBAAoB,2DAE3D,gBA3Ba,uCA6BdK,EAAAA,EAAAA,YAAU,WACF/B,IACAqB,EAAAA,GAAAA,MAAapB,EAAc6B,KAAKJ,SAChC/B,GAASqC,EAAAA,EAAAA,OAEjB,GAAG,CAAChC,EAASC,EAAON,IAEpB,IAaMsC,EAAgB,SAACd,GACnB,MAAwBA,EAAEe,OAAlB3B,EAAI,EAAJA,KAAM4B,EAAK,EAALA,MACdtB,GAAe,kBAAKD,GAAW,cAAGL,EAAO4B,IAC7C,EAOA,OACI,8BACKpC,GACG,SAAC,IAAW,KAEZ,kBAAMqC,UAAU,iBAAgB,WAC5B,gBAAKA,UAAU,kBAAiB,UAC5B,gBAAKC,IAAKC,EAAAA,EAAiBC,IAAI,aAAaC,QAAQ,YAExD,kBAAMC,SAAUvB,EAAS,WACrB,eAAIkB,UAAU,cAAa,SAAC,YAC5B,kBAAOM,QAAQ,SAASN,UAAU,0BAAyB,SACtDxB,EAAYD,OAAOgC,QAChB,gBAAKN,IAAKzB,EAAYD,OAAQ4B,IAAI,SAASC,QAAQ,OAAOI,MAAM,mBAAmBR,UAAU,kBAE7F,SAAC,MAAY,CAACQ,MAAM,mBAAmBR,UAAU,oBAGzD,iBAAKA,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,OAAM,SAAC,qBACtB,kBAAOG,KAAK,OAAOtC,KAAK,OAAOuC,GAAG,OAAOC,YAAY,gBAAgBZ,MAAOvB,EAAYL,KAAMyC,SAAUf,QAE5G,iBAAKG,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,QAAO,SAAC,uBACvB,kBACIG,KAAK,QACLtC,KAAK,QACLuC,GAAG,QACHC,YAAY,yBACZZ,MAAOvB,EAAYJ,MACnBwC,SAAUf,QAGlB,iBAAKG,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,WAAU,SAAC,yBAC1B,kBACIG,KAAM1C,EAAe,OAAS,WAC9BI,KAAK,WACLuC,GAAG,WACHC,YAAY,0BACZZ,MAAOvB,EAAYH,SACnBuC,SAAUf,IAEb9B,GAAe,SAAC,MAAM,CAAC8C,QA/Cd,WAAH,OAAS7C,GAAgB,EAAO,KA+C0B,SAAC,MAAM,CAAC6C,QAhD/D,WAAH,OAAS7C,GAAgB,EAAM,QAkD1C,iBAAKgC,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,kBAAiB,SAAC,4BACjC,kBACIG,KAAMxC,EAAsB,OAAS,WACrCE,KAAK,kBACLuC,GAAG,kBACHC,YAAY,yBACZZ,MAAOvB,EAAYF,gBACnBsC,SAAUf,IAEb5B,GACG,SAAC,MAAM,CAAC4C,QA1DK,WAAH,OAAS3C,GAAuB,EAAO,KA4DjD,SAAC,MAAM,CAAC2C,QA7DK,WAAH,OAAS3C,GAAuB,EAAM,QAgExD,iBAAK8B,UAAU,mCAAmCa,QAAS,wBAAuB,QAAvB,EAAMnC,EAAUoC,eAAO,aAAjB,EAAmBC,OAAO,EAAC,WACxF,kBAAOT,QAAQ,SAAQ,SAAC,iCACxB,kBACIG,KAAK,OACLO,OAAO,UACP7C,KAAK,SACLuC,GAAG,SACHC,YAAY,0BACZC,SA5FP,SAAC7B,GAClB,IAAMkC,EAAQlC,EAAEe,OAAOoB,MAAO,GAC9B,GAAKD,EAAL,CAIA,IAAME,EAAS,IAAIC,WACnBD,EAAOE,cAAcJ,GACrBE,EAAOG,OAAS,WACZ7C,GAAe,kBAAKD,GAAW,IAAED,OAAQgD,OAAOJ,EAAO/B,UAC3D,CANA,CAOJ,EAkF4BoC,IAAK9C,QAGb,mBAAQ+B,KAAK,SAASgB,SAAU9D,EAAU,SAAC,cAG3C,gBAAKqC,UAAU,sBAAqB,UAChC,SAAC,KAAI,CAAC0B,GAAIC,EAAAA,EAAAA,MAAc3B,UAAU,aAAY,SAAC,2BAS3E,C,qBCvKA,IANsB,SAAC5B,GACnB,OAAOA,EAAMwD,MACT,wJAER,C","sources":["components/features/auth/signup/index.tsx","utils/validateEmail.ts"],"sourcesContent":["import { ChangeEvent, FormEvent, useEffect, useRef, useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BiShow, BiHide } from \"react-icons/bi\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport LoadingPage from \"components/common/loading\";\r\nimport { validateEmail } from \"utils\";\r\nimport backgroundImage from \"assets/formBackground.svg\";\r\nimport { useSignupMutation } from \"store/queries\";\r\nimport routes from \"components/app/routes\";\r\nimport { useAppDispatch } from \"store\";\r\nimport { removeUser, setUser } from \"store/slices\";\r\n\r\nconst Signup = () => {\r\n    const dispatch = useAppDispatch();\r\n    const [signup, { isLoading, isError, error }] = useSignupMutation();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n    const [inputValues, setInputValues] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        avatar: \"\",\r\n    });\r\n    const avatarRef = useRef<HTMLInputElement | null>(null);\r\n    const navigate = useNavigate();\r\n\r\n    const onSignup = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const { name, email, password, confirmPassword } = inputValues;\r\n\r\n        if (!name || !email || !password || !confirmPassword) {\r\n            toast.warn(\"Please validate all the fields\");\r\n            return;\r\n        }\r\n        if (!validateEmail(email)) {\r\n            toast.warn(\"E-mail format is not correct\");\r\n            return;\r\n        }\r\n        if (password !== confirmPassword) {\r\n            toast.error(\"Password fields are not matching\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const result = await signup(inputValues).unwrap();\r\n            if (result.success) {\r\n                toast.success(result.message);\r\n                dispatch(setUser({ user: result.user }));\r\n                navigate(\"/\", { replace: true });\r\n            }\r\n        } catch (err: any) {\r\n            toast.error(err.data.message || \"Unable to signup\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isError) {\r\n            toast.error((error as any).data.message);\r\n            dispatch(removeUser());\r\n        }\r\n    }, [isError, error, dispatch]);\r\n\r\n    const updateAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const image = e.target.files![0];\r\n        if (!image) {\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(image);\r\n        reader.onload = () => {\r\n            setInputValues({ ...inputValues, avatar: String(reader.result) });\r\n        };\r\n    };\r\n\r\n    const validateInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setInputValues({ ...inputValues, [name]: value });\r\n    };\r\n\r\n    const showPasswordFunctionality = () => setShowPassword(true);\r\n    const hidePasswordFunctionality = () => setShowPassword(false);\r\n    const showConfirmPasswordFunctionality = () => setShowConfirmPassword(true);\r\n    const hideConfirmPasswordFunctionality = () => setShowConfirmPassword(false);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingPage />\r\n            ) : (\r\n                <main className=\"form-container\">\r\n                    <div className=\"image-container\">\r\n                        <img src={backgroundImage} alt=\"background\" loading=\"lazy\" />\r\n                    </div>\r\n                    <form onSubmit={onSignup}>\r\n                        <h1 className=\"text-center\">Signup</h1>\r\n                        <label htmlFor=\"avatar\" className=\"avatar-image--container\">\r\n                            {inputValues.avatar.length ? (\r\n                                <img src={inputValues.avatar} alt=\"avatar\" loading=\"lazy\" title=\"Select an avatar\" className=\"avatar-image\" />\r\n                            ) : (\r\n                                <FaUserCircle title=\"Select an avatar\" className=\"avatar-image\" />\r\n                            )}\r\n                        </label>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"name\">Enter your name</label>\r\n                            <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"e.g. John Doe\" value={inputValues.name} onChange={validateInput} />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"email\">Enter your e-mail</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"e.g. johndoe@gmail.com\"\r\n                                value={inputValues.email}\r\n                                onChange={validateInput}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"password\">Enter your password</label>\r\n                            <input\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                name=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"Enter a strong password\"\r\n                                value={inputValues.password}\r\n                                onChange={validateInput}\r\n                            />\r\n                            {showPassword ? <BiHide onClick={hidePasswordFunctionality} /> : <BiShow onClick={showPasswordFunctionality} />}\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"confirmPassword\">Re-enter your password</label>\r\n                            <input\r\n                                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                                name=\"confirmPassword\"\r\n                                id=\"confirmPassword\"\r\n                                placeholder=\"Re-enter your password\"\r\n                                value={inputValues.confirmPassword}\r\n                                onChange={validateInput}\r\n                            />\r\n                            {showConfirmPassword ? (\r\n                                <BiHide onClick={hideConfirmPasswordFunctionality} />\r\n                            ) : (\r\n                                <BiShow onClick={showConfirmPasswordFunctionality} />\r\n                            )}\r\n                        </div>\r\n                        <div className=\"input-container avatar-container\" onClick={() => avatarRef.current?.click()}>\r\n                            <label htmlFor=\"avatar\">Choose an avatar (optional)</label>\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                name=\"avatar\"\r\n                                id=\"avatar\"\r\n                                placeholder=\"choose from your device\"\r\n                                onChange={updateAvatar}\r\n                                ref={avatarRef}\r\n                            />\r\n                        </div>\r\n                        <button type=\"submit\" disabled={isLoading}>\r\n                            Register\r\n                        </button>\r\n                        <div className=\"more-links--wrapper\">\r\n                            <Link to={routes.login} className=\"more-links\">\r\n                                Login instead\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Signup;\r\n","const validateEmail = (email: string) => {\r\n    return email.match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport default validateEmail;\r\n"],"names":["dispatch","useAppDispatch","useSignupMutation","signup","isLoading","isError","error","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","name","email","password","confirmPassword","avatar","inputValues","setInputValues","avatarRef","useRef","navigate","useNavigate","onSignup","e","preventDefault","toast","validateEmail","unwrap","result","success","message","setUser","user","replace","data","useEffect","removeUser","validateInput","target","value","className","src","backgroundImage","alt","loading","onSubmit","htmlFor","length","title","type","id","placeholder","onChange","onClick","current","click","accept","image","files","reader","FileReader","readAsDataURL","onload","String","ref","disabled","to","routes","match"],"sourceRoot":""}