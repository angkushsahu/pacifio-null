{"version":3,"file":"static/js/331.1789ad27.chunk.js","mappings":"6NA6GA,UAtGgB,WACZ,OAAmCA,EAAAA,EAAAA,MAAsB,eAAlDC,EAAS,KAAIC,EAAS,KAATA,UACpB,GAAsCC,EAAAA,EAAAA,UAAmB,CACrDC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,KACX,eALKC,EAAW,KAAEC,EAAc,KAO5BC,EAAS,yCAAG,WAAOC,GAAY,oFAEI,GADrCA,EAAEC,iBACMR,EAAkCI,EAAlCJ,KAAMC,EAA4BG,EAA5BH,MAAOE,EAAqBC,EAArBD,QAASD,EAAYE,EAAZF,QAEzBF,GAASC,GAAUE,EAAQM,QAAWP,EAAO,gBACD,OAA7CQ,EAAAA,GAAAA,KAAW,kCAAkC,8BAG5CC,EAAAA,EAAAA,GAAcV,GAAO,CAAD,eACsB,OAA3CS,EAAAA,GAAAA,KAAW,gCAAgC,oDAKpBb,EAAUO,GAAaQ,SAAS,KAAD,IAAhDC,EAAQ,QACDC,UACTJ,EAAAA,GAAAA,QAAcG,EAASV,SACvBE,EAAe,CAAEL,KAAM,GAAIC,MAAO,GAAIC,QAAS,GAAIC,QAAS,MAC/D,kDAEDO,EAAAA,GAAAA,MAAY,KAAIK,KAAKZ,SAAmB,0DAE/C,gBAtBc,sCAwBTa,EAAgB,SAACT,GACnB,MAAwBA,EAAEU,OAAlBjB,EAAI,EAAJA,KAAMkB,EAAK,EAALA,MACdb,GAAe,kBAAKD,GAAW,cAAGJ,EAAOkB,IAC7C,EAEMC,EAAe,WACjB,OAAOf,EAAYF,QAAUE,EAAYF,QAAQ,GAAGkB,cAAgBhB,EAAYF,QAAQmB,UAAU,GAAK,SAC3G,EAEA,OACI,8BACKvB,GACG,SAAC,IAAW,KAEZ,iBAAMwB,UAAU,iBAAiBC,MAAO,CAAEC,QAAS,QAAS,UACxD,kBAAMC,SAAUnB,EAAU,WACtB,eAAIgB,UAAU,cAAa,SAAC,gBAC5B,iBAAKA,UAAU,kBAAiB,WAC5B,kBAAOI,QAAQ,OAAM,SAAC,qBACtB,kBAAOC,KAAK,OAAO3B,KAAK,OAAO4B,GAAG,OAAOC,YAAY,gBAAgBX,MAAOd,EAAYJ,KAAM8B,SAAUd,QAE5G,iBAAKM,UAAU,kBAAiB,WAC5B,kBAAOI,QAAQ,QAAO,SAAC,uBACvB,kBACIC,KAAK,QACL3B,KAAK,QACL4B,GAAG,QACHC,YAAY,yBACZX,MAAOd,EAAYH,MACnB6B,SAAUd,QAGlB,iBAAKM,UAAU,kBAAiB,WAC5B,kBAAOI,QAAQ,UAAS,SAAC,mBACzB,oBACI1B,KAAK,UACL4B,GAAG,UACHV,MAAOd,EAAYF,QACnB4B,SAAUd,EACVM,UAAmC,KAAxBlB,EAAYF,QAAiB,aAAe,GAAG,WAE1D,mBAAQgB,MAAM,GAAGa,UAAU,EAAK,SAAC,kBAGjC,mBAAQb,MAAM,QAAO,SAAC,WACtB,mBAAQA,MAAM,YAAW,SAAC,eAC1B,mBAAQA,MAAM,WAAU,SAAC,oBAGjC,iBAAKI,UAAU,kBAAiB,WAC5B,mBAAOI,QAAQ,UAAS,UAAC,cAAYP,QACrC,qBACInB,KAAK,UACL4B,GAAG,UACHC,YAAW,qBAAgBV,KAC3BD,MAAOd,EAAYD,QACnB2B,SAAUd,QAGlB,oBAAQW,KAAK,SAASI,SAAUjC,EAAU,UAAC,QACjCqB,aAOlC,C,qBCrGA,IANsB,SAAClB,GACnB,OAAOA,EAAM+B,MACT,wJAER,C","sources":["components/common/contact/index.tsx","utils/validateEmail.ts"],"sourcesContent":["import { ChangeEvent, FormEvent, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport LoadingPage from \"../loading\";\r\nimport { validateEmail } from \"utils\";\r\nimport { IContact } from \"types\";\r\nimport { useContactUsMutation } from \"store/queries\";\r\n\r\nconst Contact = () => {\r\n    const [contactUs, { isLoading }] = useContactUsMutation();\r\n    const [inputValues, setInputValues] = useState<IContact>({\r\n        name: \"\",\r\n        email: \"\",\r\n        subject: \"\",\r\n        message: \"\",\r\n    });\r\n\r\n    const onContact = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const { name, email, message, subject } = inputValues;\r\n\r\n        if (!name || !email || !message.trim() || !subject) {\r\n            toast.warn(\"Please validate all the fields\");\r\n            return;\r\n        }\r\n        if (!validateEmail(email)) {\r\n            toast.warn(\"E-mail format is not correct\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await contactUs(inputValues).unwrap();\r\n            if (response.success) {\r\n                toast.success(response.message);\r\n                setInputValues({ name: \"\", email: \"\", subject: \"\", message: \"\" });\r\n            }\r\n        } catch (err: any) {\r\n            toast.error(err.data.message as string);\r\n        }\r\n    };\r\n\r\n    const validateInput = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = e.target;\r\n        setInputValues({ ...inputValues, [name]: value });\r\n    };\r\n\r\n    const getQueryType = () => {\r\n        return inputValues.subject ? inputValues.subject[0].toUpperCase() + inputValues.subject.substring(1) : \"Message\";\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingPage />\r\n            ) : (\r\n                <main className=\"form-container\" style={{ padding: \"2rem\" }}>\r\n                    <form onSubmit={onContact}>\r\n                        <h1 className=\"text-center\">Contact Us</h1>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"name\">Enter your name</label>\r\n                            <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"e.g. John Doe\" value={inputValues.name} onChange={validateInput} />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"email\">Enter your e-mail</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"e.g. johndoe@gmail.com\"\r\n                                value={inputValues.email}\r\n                                onChange={validateInput}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"subject\">Enter Subject</label>\r\n                            <select\r\n                                name=\"subject\"\r\n                                id=\"subject\"\r\n                                value={inputValues.subject}\r\n                                onChange={validateInput}\r\n                                className={inputValues.subject === \"\" ? \"burn_color\" : \"\"}\r\n                            >\r\n                                <option value=\"\" disabled={true}>\r\n                                    -- Select --\r\n                                </option>\r\n                                <option value=\"query\">Query</option>\r\n                                <option value=\"complaint\">Complaint</option>\r\n                                <option value=\"feedback\">Feedback</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"message\">Enter Your {getQueryType()}</label>\r\n                            <textarea\r\n                                name=\"message\"\r\n                                id=\"message\"\r\n                                placeholder={`Enter your ${getQueryType()}`}\r\n                                value={inputValues.message}\r\n                                onChange={validateInput}\r\n                            ></textarea>\r\n                        </div>\r\n                        <button type=\"submit\" disabled={isLoading}>\r\n                            Send {getQueryType()}\r\n                        </button>\r\n                    </form>\r\n                </main>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n","const validateEmail = (email: string) => {\r\n    return email.match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport default validateEmail;\r\n"],"names":["useContactUsMutation","contactUs","isLoading","useState","name","email","subject","message","inputValues","setInputValues","onContact","e","preventDefault","trim","toast","validateEmail","unwrap","response","success","data","validateInput","target","value","getQueryType","toUpperCase","substring","className","style","padding","onSubmit","htmlFor","type","id","placeholder","onChange","disabled","match"],"sourceRoot":""}