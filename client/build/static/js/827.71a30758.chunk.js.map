{"version":3,"file":"static/js/827.71a30758.chunk.js","mappings":"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","sources":["components/features/auth/updateProfile/index.tsx","utils/validateEmail.ts"],"sourcesContent":["import { ChangeEvent, FormEvent, useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport LoadingPage from \"components/common/loading\";\r\nimport { validateEmail } from \"utils\";\r\nimport backgroundImage from \"assets/formBackground.svg\";\r\nimport { useUpdateAccountMutation } from \"store/queries\";\r\nimport { useAppDispatch, useAppSelector } from \"store\";\r\nimport { setUser } from \"store/slices\";\r\n\r\nconst UpdateProfile = () => {\r\n    const { user } = useAppSelector((state) => state.authSlice);\r\n    const dispatch = useAppDispatch();\r\n    const [updateAccount, { isLoading, isError, error }] = useUpdateAccountMutation();\r\n    const [inputValues, setInputValues] = useState({\r\n        avatar: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        deleteAvatar: false,\r\n    });\r\n    const avatarRef = useRef<HTMLInputElement | null>(null);\r\n\r\n    const onProfileUpdate = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        const { avatar, email, name, deleteAvatar } = inputValues;\r\n\r\n        if (!email || !name) {\r\n            toast.warn(\"Please validate all the fields\");\r\n            return;\r\n        }\r\n        if (!validateEmail(email)) {\r\n            toast.warn(\"E-mail format is not correct\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            if (user?.name !== name || user?.email !== email || (user?.pic && deleteAvatar) || avatar) {\r\n                const result = await updateAccount(inputValues).unwrap();\r\n                if (result.success) {\r\n                    toast.success(result.message);\r\n                    dispatch(setUser({ user: result.user }));\r\n                }\r\n            }\r\n        } catch (err: any) {\r\n            toast.error(err.data.message || \"Unable to update your account\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isError) {\r\n            toast.error((error as any).data.message);\r\n        }\r\n    }, [isError, error]);\r\n\r\n    useEffect(() => {\r\n        setInputValues({ avatar: \"\", deleteAvatar: false, email: user?.email || \"\", name: user?.name || \"\" });\r\n    }, [user]);\r\n\r\n    const updateAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const image = e.target.files![0];\r\n        if (!image) {\r\n            return;\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(image);\r\n        reader.onload = () => {\r\n            setInputValues({ ...inputValues, avatar: String(reader.result) });\r\n        };\r\n    };\r\n\r\n    const validateInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setInputValues({ ...inputValues, [name]: value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingPage />\r\n            ) : (\r\n                <main className=\"form-container\">\r\n                    <div className=\"image-container\">\r\n                        <img src={backgroundImage} alt=\"background\" loading=\"lazy\" />\r\n                    </div>\r\n                    <form onSubmit={onProfileUpdate}>\r\n                        <h1>Update Profile</h1>\r\n                        <label htmlFor=\"avatar\" className=\"avatar-image--container\">\r\n                            {inputValues.avatar || user?.pic ? (\r\n                                <img\r\n                                    src={inputValues.avatar ? inputValues.avatar : user?.pic}\r\n                                    alt=\"avatar\"\r\n                                    loading=\"lazy\"\r\n                                    title=\"Change avatar\"\r\n                                    className=\"avatar-image\"\r\n                                />\r\n                            ) : (\r\n                                <FaUserCircle title=\"Change avatar\" className=\"avatar-image\" />\r\n                            )}\r\n                        </label>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"name\">Enter your name</label>\r\n                            <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"e.g. John Doe\" value={inputValues.name} onChange={validateInput} />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"email\">Enter your e-mail</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                placeholder=\"e.g. johndoe@gmail.com\"\r\n                                value={inputValues.email}\r\n                                onChange={validateInput}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container checkbox-container\">\r\n                            <label htmlFor=\"deleteAvatar\">Delete Avatar</label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                name=\"deleteAvatar\"\r\n                                id=\"deleteAvatar\"\r\n                                onChange={(e) => setInputValues({ ...inputValues, deleteAvatar: e.target.checked })}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container avatar-container\" onClick={() => avatarRef.current?.click()}>\r\n                            <label htmlFor=\"avatar\">Change avatar</label>\r\n                            <input\r\n                                type=\"file\"\r\n                                accept=\"image/*\"\r\n                                name=\"avatar\"\r\n                                id=\"avatar\"\r\n                                placeholder=\"choose from your device\"\r\n                                onChange={updateAvatar}\r\n                                ref={avatarRef}\r\n                            />\r\n                        </div>\r\n                        <button type=\"submit\" disabled={isLoading}>\r\n                            Update\r\n                        </button>\r\n                    </form>\r\n                </main>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateProfile;\r\n","const validateEmail = (email: string) => {\r\n    return email.match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport default validateEmail;\r\n"],"names":["user","useAppSelector","state","authSlice","dispatch","useAppDispatch","useUpdateAccountMutation","updateAccount","isLoading","isError","error","useState","avatar","email","name","deleteAvatar","inputValues","setInputValues","avatarRef","useRef","onProfileUpdate","e","preventDefault","toast","validateEmail","pic","unwrap","result","success","message","setUser","data","useEffect","validateInput","target","value","className","src","backgroundImage","alt","loading","onSubmit","htmlFor","title","type","id","placeholder","onChange","checked","onClick","current","click","accept","image","files","reader","FileReader","readAsDataURL","onload","String","ref","disabled","match"],"sourceRoot":""}