{"version":3,"file":"static/js/950.f5679fb4.chunk.js","mappings":"wPAwGA,UA/FsB,WAClB,OAAuDA,EAAAA,EAAAA,MAA0B,eAA1EC,EAAa,YAAIC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAC5C,GAAwCC,EAAAA,EAAAA,WAAS,GAAM,eAAhDC,EAAY,KAAEC,EAAe,KACpC,GAAsDF,EAAAA,EAAAA,WAAS,GAAM,eAA9DG,EAAmB,KAAEC,EAAsB,KAClD,GAAsCJ,EAAAA,EAAAA,UAAS,CAAEK,SAAU,GAAIC,gBAAiB,KAAK,eAA9EC,EAAW,KAAEC,EAAc,KAC1BC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,yCAAG,WAAOC,GAAY,4EACpB,GAAnBA,EAAEC,iBACGR,EAAYF,UAAaE,EAAYD,gBAAe,gBACR,OAA7CU,EAAAA,GAAAA,KAAW,kCAAkC,6BAG7CT,EAAYD,kBAAoBC,EAAYF,SAAQ,gBACL,OAA/CW,EAAAA,GAAAA,KAAW,oCAAoC,oDAK1BpB,EAAc,CAAES,SAAUE,EAAYF,SAAUY,QAASR,IAAOS,SAAS,KAAD,IAAvFC,EAAM,QACDC,UACPJ,EAAAA,GAAAA,QAAcG,EAAOE,SACrBV,EAASW,EAAAA,EAAAA,MAAc,CAAEC,SAAS,KACrC,kDAEDP,EAAAA,GAAAA,MAAY,KAAIQ,KAAKH,SAAW,6BAA6B,0DAEpE,gBApBoB,uCAsBrBI,EAAAA,EAAAA,YAAU,WACF3B,GACAkB,EAAAA,GAAAA,MAAajB,EAAcyB,KAAKH,QAExC,GAAG,CAACvB,EAASC,IAEb,IAAM2B,EAAgB,SAACZ,GACnB,MAAwBA,EAAEa,OAAlBC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MACdrB,GAAe,kBAAKD,GAAW,cAAGqB,EAAOC,IAC7C,EAOA,OACI,8BACKhC,GACG,SAAC,IAAW,KAEZ,kBAAMiC,UAAU,iBAAgB,WAC5B,gBAAKA,UAAU,kBAAiB,UAC5B,gBAAKC,IAAKC,EAAAA,EAAiBC,IAAI,aAAaC,QAAQ,YAExD,kBAAMC,SAAUtB,EAAgB,WAC5B,wBAAI,oBACJ,iBAAKiB,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,WAAU,SAAC,yBAC1B,kBACIC,KAAMpC,EAAe,OAAS,WAC9B2B,KAAK,WACLnB,GAAG,WACH6B,YAAY,0BACZT,MAAOtB,EAAYF,SACnBkC,SAAUb,IAEbzB,GAAe,SAAC,MAAM,CAACuC,QAzBd,WAAH,OAAStC,GAAgB,EAAO,KAyB0B,SAAC,MAAM,CAACsC,QA1B/D,WAAH,OAAStC,GAAgB,EAAM,QA4B1C,iBAAK4B,UAAU,kBAAiB,WAC5B,kBAAOM,QAAQ,kBAAiB,SAAC,4BACjC,kBACIC,KAAMlC,EAAsB,OAAS,WACrCyB,KAAK,kBACLnB,GAAG,kBACH6B,YAAY,yBACZT,MAAOtB,EAAYD,gBACnBiC,SAAUb,IAEbvB,GACG,SAAC,MAAM,CAACqC,QApCK,WAAH,OAASpC,GAAuB,EAAO,KAsCjD,SAAC,MAAM,CAACoC,QAvCK,WAAH,OAASpC,GAAuB,EAAM,QA0CxD,mBAAQiC,KAAK,SAASI,SAAU5C,EAAU,SAAC,2BAQnE,C","sources":["components/features/auth/resetPassword/index.tsx"],"sourcesContent":["import { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BiShow, BiHide } from \"react-icons/bi\";\r\nimport backgroundImage from \"assets/formBackground.svg\";\r\nimport LoadingPage from \"components/common/loading\";\r\nimport { useResetPasswordMutation } from \"store/queries\";\r\nimport routes from \"components/app/routes\";\r\n\r\nconst ResetPassword = () => {\r\n    const [resetPassword, { isLoading, isError, error }] = useResetPasswordMutation();\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n    const [inputValues, setInputValues] = useState({ password: \"\", confirmPassword: \"\" });\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n\r\n    const onResetPassword = async (e: FormEvent) => {\r\n        e.preventDefault();\r\n        if (!inputValues.password || !inputValues.confirmPassword) {\r\n            toast.warn(\"Please validate all the fields\");\r\n            return;\r\n        }\r\n        if (inputValues.confirmPassword !== inputValues.password) {\r\n            toast.warn(\"Password fields are not matching\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const result = await resetPassword({ password: inputValues.password, resetId: id! }).unwrap();\r\n            if (result.success) {\r\n                toast.success(result.message);\r\n                navigate(routes.login, { replace: true });\r\n            }\r\n        } catch (err: any) {\r\n            toast.error(err.data.message || \"Unable to update password\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isError) {\r\n            toast.error((error as any).data.message);\r\n        }\r\n    }, [isError, error]);\r\n\r\n    const validateInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setInputValues({ ...inputValues, [name]: value });\r\n    };\r\n\r\n    const showPasswordFunctionality = () => setShowPassword(true);\r\n    const hidePasswordFunctionality = () => setShowPassword(false);\r\n    const showConfirmPasswordFunctionality = () => setShowConfirmPassword(true);\r\n    const hideConfirmPasswordFunctionality = () => setShowConfirmPassword(false);\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <LoadingPage />\r\n            ) : (\r\n                <main className=\"form-container\">\r\n                    <div className=\"image-container\">\r\n                        <img src={backgroundImage} alt=\"background\" loading=\"lazy\" />\r\n                    </div>\r\n                    <form onSubmit={onResetPassword}>\r\n                        <h1>Reset Password</h1>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"password\">Enter your password</label>\r\n                            <input\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                name=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"Enter a strong password\"\r\n                                value={inputValues.password}\r\n                                onChange={validateInput}\r\n                            />\r\n                            {showPassword ? <BiHide onClick={hidePasswordFunctionality} /> : <BiShow onClick={showPasswordFunctionality} />}\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label htmlFor=\"confirmPassword\">Re-enter your password</label>\r\n                            <input\r\n                                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                                name=\"confirmPassword\"\r\n                                id=\"confirmPassword\"\r\n                                placeholder=\"Re-enter your password\"\r\n                                value={inputValues.confirmPassword}\r\n                                onChange={validateInput}\r\n                            />\r\n                            {showConfirmPassword ? (\r\n                                <BiHide onClick={hideConfirmPasswordFunctionality} />\r\n                            ) : (\r\n                                <BiShow onClick={showConfirmPasswordFunctionality} />\r\n                            )}\r\n                        </div>\r\n                        <button type=\"submit\" disabled={isLoading}>\r\n                            Change Password\r\n                        </button>\r\n                    </form>\r\n                </main>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"names":["useResetPasswordMutation","resetPassword","isLoading","isError","error","useState","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","password","confirmPassword","inputValues","setInputValues","id","useParams","navigate","useNavigate","onResetPassword","e","preventDefault","toast","resetId","unwrap","result","success","message","routes","replace","data","useEffect","validateInput","target","name","value","className","src","backgroundImage","alt","loading","onSubmit","htmlFor","type","placeholder","onChange","onClick","disabled"],"sourceRoot":""}